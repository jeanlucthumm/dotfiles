#!/bin/python3

import os
from pathlib import Path
import re
import subprocess
import sys

ERR_UNKNOWN_THEME = "Unknown theme"

AVAILABLE_THEMES = [
    "solarized-light",
    "solarized-dark",
]

HOME = Path(os.environ["HOME"])
CONFIG = Path(os.environ["XDG_CONFIG_HOME"] or HOME / ".config")


class ThemeError(ValueError):
    pass


def search_and_replace(path: str, search: str, replace: str):
    with open(path, "r+") as f:
        text = f.read()
        text = re.sub(search, replace, text, flags=re.MULTILINE)
        f.seek(0)
        f.write(text)
        f.truncate()


def handle_kitty(theme: str):
    if theme not in ["solarized-light", "solarized-dark"]:
        raise ThemeError(ERR_UNKNOWN_THEME)
    path = str(CONFIG / "kitty/kitty.conf")
    search_and_replace(path, "^include.*$", f"include theme-{theme}.conf")
    search_and_replace(path, "^env.*$", f"env KITTY_THEME={theme}")
    subprocess.run(["kitty", "@", "set-colors", "-a", "-c", path])


def handle_gtk(theme: str):
    if theme == "solarized-light":
        # name = "NumixSolarizedLightBlue"
        # icon = "WhiteSur-dark"
        name = "Orchis-light"
        icon = "Tela"
    elif theme == "solarized-dark":
        name = "NumixSolarizedDarkBlue"
        icon = "WhiteSur-dark"
    else:
        raise ThemeError(ERR_UNKNOWN_THEME)

    path = str(CONFIG / "xsettingsd")
    search_and_replace(path, "^Net/ThemeName.*$", f"Net/ThemeName \"{name}\"")
    search_and_replace(path, "^Net/IconThemeName.*$", f"Net/IconThemeName \"{icon}\"")

    subprocess.run(["killall", "-HUP", "xsettingsd"])

def handle_wallpaper(theme: str):
    if theme == "solarized-light":
        path = HOME / "media/flower.jpg"
    elif theme == "solarized-dark":
        path = HOME / "media/arch-dark.png"
    else:
        raise ThemeError(ERR_UNKNOWN_THEME)

    subprocess.run(["ln", "-sf", path, str(HOME / ".config/default_wallpaper")])
    subprocess.run(["feh", "--bg-scale", str(path)])


HANDLERS = {"kitty": handle_kitty, "gtk": handle_gtk, "wallpaper": handle_wallpaper}


def main():
    if len(sys.argv) != 2:
        print("Usage: themer theme\n")
        print("Available themes: \n" + "\n".join(["\t" + x for x in AVAILABLE_THEMES]))
        exit(127)
    if sys.argv[1] == "--list":
        print(" ".join(AVAILABLE_THEMES))
        return
    bad_handlers = []
    for key, handler in HANDLERS.items():
        try:
            handler(sys.argv[1])
        except ThemeError:
            bad_handlers.append(key)
    if len(bad_handlers) != 0:
        print(
            f"The following handlers do not support theme {sys.argv[1]}:", bad_handlers
        )


if __name__ == "__main__":
    main()
