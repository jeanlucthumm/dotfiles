#!/bin/python3

import os
from pathlib import Path
import re
import subprocess
import sys
import json

ERR_UNKNOWN_THEME = "Unknown theme"

AVAILABLE_THEMES = [
    "solarized-light",
    "solarized-dark",
    "gruvbox-light",
    "gruvbox-dark",
]

HOME = Path(os.environ["HOME"])
CONFIG = Path(os.environ["XDG_CONFIG_HOME"] or HOME / ".config")


class ThemeError(ValueError):
    pass


def search_and_replace(path: str, search: str, replace: str):
    with open(path, "r+") as f:
        text = f.read()
        text = re.sub(search, replace, text, flags=re.MULTILINE)
        f.seek(0)
        f.write(text)
        f.truncate()


def is_wayland() -> bool:
    return os.environ.get("XDG_SESSION_TYPE") == "wayland"


def is_hyprland() -> bool:
    return "HYPRLAND_INSTANCE_SIGNATURE" in os.environ


def get_screen_size() -> str:
    if os.environ.get("XDG_SESSION_TYPE") == "x11":
        output = subprocess.getoutput("xrandr")
        for line in output.splitlines():
            if " connected" in line:
                if "3440x1440" in line:
                    return "wide"
                if "3840x2160" in line:
                    return "4k"
        raise ValueError("could not determine screen size:\n" + output)
    elif os.environ.get("XDG_SESSION_TYPE") == "wayland":
        if "SWAYSOCK" in os.environ:
            output = subprocess.getoutput("swaymsg -t get_outputs")
            for line in output.splitlines():
                if "current_workspace" in line:
                    if "3440x1440" in line:
                        return "wide"
                    if "3840x2160" in line:
                        return "4k"
            raise ValueError("could not determine screen size:\n" + output)
        elif "HYPRLAND_INSTANCE_SIGNATURE" in os.environ:
            # -j produces JSON output
            output = subprocess.getoutput("hyprctl monitors -j")
            vals = json.loads(output)
            if len(vals) == 0:
                raise ValueError(
                    "could not determine screen size: hyprctl returned no monitors"
                )
            width = vals[0]["width"]
            height = vals[0]["height"]
            if width == 3440 and height == 1440:
                return "wide"
            elif width == 3840 and height == 2160:
                return "4k"
            raise ValueError(
                f"unrecognized screen size: {width}x{height} (hyprctl output: {output})"
            )
        else:
            raise ValueError(
                "could not determine screen size: unknown wayland compositor"
            )
    else:
        raise ValueError("could not determine screen size: unknown session type")


def handle_kitty(theme: str):
    if theme == "solarized-light":
        theme_file = "theme-solarized-light.conf"
    elif theme == "solarized-light":
        theme_file = "theme-solarized-dark.conf"
    elif theme == "gruvbox-light":
        theme_file = "gruvbox_light.conf"
    elif theme == "gruvbox-dark":
        theme_file = "gruvbox_dark.conf"
    else:
        raise ThemeError(ERR_UNKNOWN_THEME)
    path = str(CONFIG / "kitty/theme.conf")
    search_and_replace(path, "^include.*$", f"include theme/{theme_file}")
    search_and_replace(path, "^env.*$", f"env KITTY_THEME={theme}")
    subprocess.run(
        [
            "kitty",
            "@",
            "set-colors",
            "-a",
            "-c",
            str(CONFIG / "kitty" / "theme" / theme_file),
        ]
    )
    subprocess.run(["kitty", "@", "env", f"KITTY_THEME={theme}"])


def handle_gtk_x11(theme: str):
    if theme == "solarized-light":
        # name = "NumixSolarizedLightBlue"
        # icon = "WhiteSur-dark"
        name = "Orchis-light"
        icon = "Tela"
    elif theme == "solarized-dark":
        name = "NumixSolarizedDarkBlue"
        icon = "WhiteSur-dark"
    else:
        raise ThemeError(ERR_UNKNOWN_THEME)

    path = str(CONFIG / "xsettingsd")
    search_and_replace(path, "^Net/ThemeName.*$", f'Net/ThemeName "{name}"')
    search_and_replace(path, "^Net/IconThemeName.*$", f'Net/IconThemeName "{icon}"')

    subprocess.run(["killall", "-HUP", "xsettingsd"])


def handle_gsettings(theme: str):
    if theme == "solarized-light":
        name = "NumixSolarizedLightBlue"
        icon = "WhiteSur-dark"
    elif theme == "solarized-dark":
        name = "NumixSolarizedDarkBlue"
        icon = "WhiteSur-dark"
    elif theme == "gruvbox-light":
        name = "Gruvbox-Light-B"
        icon = "Gruvbox-Light"
    elif theme == "gruvbox-dark":
        name = "Gruvbox-Dark-B"
        icon = "Gruvbox-Dark"
    else:
        raise ThemeError(ERR_UNKNOWN_THEME)

    subprocess.run(
        ["gsettings", "set", "org.gnome.desktop.interface", "gtk-theme", name]
    )
    subprocess.run(
        ["gsettings", "set", "org.gnome.desktop.interface", "icon-theme", icon]
    )


def handle_wallpaper(theme: str):
    screen = get_screen_size()
    path = None
    if theme == "solarized-light":
        if screen == "4k":
            path = HOME / "media/flower.jpg"
        elif screen == "wide":
            path = HOME / "media/wallpapers/wide/solarized-light.png"
    elif theme == "solarized-dark":
        if screen == "4k":
            path = HOME / "media/arch-dark.png"
        elif screen == "wide":
            path = HOME / "media/wallpapers/wide/solarized-dark.png"
    elif theme == "gruvbox-light":
        if screen == "4k":
            path = HOME / "media/flower.jpg"
        elif screen == "wide":
            path = HOME / "media/wallpapers/wide/gruvbox-light.png"
    elif theme == "gruvbox-dark":
        if screen == "4k":
            path = HOME / "media/flower.jpg"
        elif screen == "wide":
            path = HOME / "media/wallpapers/wide/gruvbox-dark.png"

    if path is None:
        raise ThemeError(ERR_UNKNOWN_THEME)

    default_path = CONFIG / "default_wallpaper"
    subprocess.run(["ln", "-sf", path, str(default_path)])

    if is_hyprland():
        subprocess.run(["hyprctl", "hyprpaper", "unload", str(default_path)])
        subprocess.run(["hyprctl", "hyprpaper", "preload", str(default_path)])
        monitor = json.loads(subprocess.getoutput("hyprctl monitors -j"))[0]
        print(f"{monitor['name']},{str(default_path)}")
        subprocess.run(
            [
                "hyprctl",
                "hyprpaper",
                "wallpaper",
                f"{monitor['name']},{str(default_path)}",
            ]
        )
    else:
        subprocess.run(["feh", "--bg-scale", str(path)])


def main():
    if len(sys.argv) != 2:
        print("Usage: themer theme\n")
        print("Available themes: \n" + "\n".join(["\t" + x for x in AVAILABLE_THEMES]))
        exit(127)
    if sys.argv[1] == "--list":
        print(" ".join(AVAILABLE_THEMES))
        return

    handlers = {
        "kitty": handle_kitty,
        "wallpaper": handle_wallpaper,
    }
    if is_wayland():
        handlers["gsettings"] = handle_gsettings
    else:
        handlers["gtk"] = handle_gtk_x11
    bad_handlers = []
    for key, handler in handlers.items():
        try:
            handler(sys.argv[1])
        except ThemeError:
            bad_handlers.append(key)
    if len(bad_handlers) != 0:
        print(
            f"The following handlers do not support theme {sys.argv[1]}:", bad_handlers
        )


if __name__ == "__main__":
    main()
